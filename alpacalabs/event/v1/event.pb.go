// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alpacalabs/event/v1/event.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TraceInfo struct {
	TraceId              string   `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Sampled              bool     `protobuf:"varint,2,opt,name=sampled,proto3" json:"sampled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TraceInfo) Reset()         { *m = TraceInfo{} }
func (m *TraceInfo) String() string { return proto.CompactTextString(m) }
func (*TraceInfo) ProtoMessage()    {}
func (*TraceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_62c22c33641e34fa, []int{0}
}

func (m *TraceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceInfo.Unmarshal(m, b)
}
func (m *TraceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceInfo.Marshal(b, m, deterministic)
}
func (m *TraceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceInfo.Merge(m, src)
}
func (m *TraceInfo) XXX_Size() int {
	return xxx_messageInfo_TraceInfo.Size(m)
}
func (m *TraceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TraceInfo proto.InternalMessageInfo

func (m *TraceInfo) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *TraceInfo) GetSampled() bool {
	if m != nil {
		return m.Sampled
	}
	return false
}

type EventInfo struct {
	// a unique id for this event
	EventId              string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventInfo) Reset()         { *m = EventInfo{} }
func (m *EventInfo) String() string { return proto.CompactTextString(m) }
func (*EventInfo) ProtoMessage()    {}
func (*EventInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_62c22c33641e34fa, []int{1}
}

func (m *EventInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventInfo.Unmarshal(m, b)
}
func (m *EventInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventInfo.Marshal(b, m, deterministic)
}
func (m *EventInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInfo.Merge(m, src)
}
func (m *EventInfo) XXX_Size() int {
	return xxx_messageInfo_EventInfo.Size(m)
}
func (m *EventInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EventInfo proto.InternalMessageInfo

func (m *EventInfo) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func init() {
	proto.RegisterType((*TraceInfo)(nil), "alpacalabs.event.v1.TraceInfo")
	proto.RegisterType((*EventInfo)(nil), "alpacalabs.event.v1.EventInfo")
}

func init() { proto.RegisterFile("alpacalabs/event/v1/event.proto", fileDescriptor_62c22c33641e34fa) }

var fileDescriptor_62c22c33641e34fa = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcc, 0x29, 0x48,
	0x4c, 0x4e, 0xcc, 0x49, 0x4c, 0x2a, 0xd6, 0x4f, 0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2f, 0x33, 0x84,
	0x30, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x11, 0x0a, 0xf4, 0x20, 0xe2, 0x65, 0x86,
	0x4a, 0x0e, 0x5c, 0x9c, 0x21, 0x45, 0x89, 0xc9, 0xa9, 0x9e, 0x79, 0x69, 0xf9, 0x42, 0x92, 0x5c,
	0x1c, 0x25, 0x20, 0x4e, 0x7c, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x3b, 0x98,
	0xef, 0x99, 0x22, 0x24, 0xc1, 0xc5, 0x5e, 0x9c, 0x98, 0x5b, 0x90, 0x93, 0x9a, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe3, 0x2a, 0xa9, 0x71, 0x71, 0xba, 0x82, 0x4c, 0x83, 0x99, 0x00,
	0x36, 0x1a, 0xc9, 0x04, 0x30, 0xdf, 0x33, 0xc5, 0x69, 0x3a, 0x23, 0x97, 0x78, 0x72, 0x7e, 0xae,
	0x1e, 0x16, 0x57, 0x38, 0x71, 0x81, 0x4d, 0x08, 0x00, 0x39, 0x33, 0x80, 0x31, 0xca, 0x26, 0x3d,
	0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xdf, 0x11, 0xac, 0xda, 0x07, 0xe4, 0x29,
	0xb0, 0x2f, 0x8a, 0x52, 0x0b, 0xf2, 0x75, 0xc1, 0xfa, 0x74, 0xd3, 0xf3, 0xf5, 0xb1, 0x78, 0x79,
	0x11, 0x13, 0xb3, 0xa3, 0x8f, 0xe3, 0x2a, 0x26, 0x61, 0x84, 0x4e, 0x3d, 0xb0, 0xe9, 0x7a, 0x61,
	0x86, 0xa7, 0x90, 0x45, 0x63, 0xc0, 0xa2, 0x31, 0x61, 0x86, 0x49, 0x6c, 0x60, 0x93, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x70, 0x85, 0xe5, 0x42, 0x01, 0x00, 0x00,
}
